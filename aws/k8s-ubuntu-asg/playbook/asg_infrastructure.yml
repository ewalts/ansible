---

- name: AWS - Create EC2 Instance
  vars_files:
    - vars/asg_vars.yml
    - vars/aws_template_vars.yml
  hosts: localhost
  gather_facts: false
  tasks:

#    - name: Create VPC for Kubernetes 
#      amazon.aws.ec2_vpc_net:
#        name: "{{ new_vpc_name }}"
#        cidr_block: "{{ cidr_block }}"
#        region: "{{ region }}"
#        tags:
#          application: "{{ new_vpc_app }}" 
#          purpose: "{{ new_vpc_purpose }}"
#        tenancy: default
#      register: vpc_info
#      when: create_vpc == 'true' 

    - name: Create Node communication subnet
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc_id }}"
        cidr: "{{ ncom_net_cidr }}"
        tags:
          net_role: k8s_ncom
          environment: "{{ new_env }}"
          Name: "{{ subnet_tag_name }}"
      register: ncom_subnet_info

    - name: Create node communication security group
      amazon.aws.ec2_security_group:
        name: "{{ ncom_net_sg }}"
        description: communication for kubernetes hosts
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            ports:
              - 2379-2380
              - 10250
              - 10257
              - 10259
              - 8080
              - 443
              - 80
              - 22
              - 6443
              - 5473
              - 4789
              - 179
            cidr_ip: "{{ ncom_net_cidr }}"
          - proto: tcp
            ports:
              - 8080
              - 443
              - 80
              - 22
              - 6443
            cidr_ip: "{{ my_ip }}"
      register: ncom_sg_info 

    - name: Show security group sg instance_id
      ansible.builtin.debug:
        var: ncom_sg_info['group_id'] 

    - name: Create K8s assume Role
      community.aws.iam_role:
        name: "{{ iam_role }}"
        assume_role_policy_document: "{{ lookup('file','../scripts/assume_iam_role.json') }}"
        description: Role for nagios monitor
        state: present
        tags:
          environment: "{{ new_env }}"

    - name: AWS IAM Instance Profile - Create
      ansible.builtin.command: aws iam create-instance-profile
        --instance-profile-name "{{ instance_profile }}"
      ignore_errors: true

    - name: Create K8s ECR Policy
      amazon.aws.iam_policy:
        iam_type: role
        iam_name: "{{ iam_role }}"
        policy_name: "{{ policy_name }}"
        policy_json: "{{ lookup('file','../scripts/k8s_ec2_policy.json') }}"
        state: present

    - name: Attach K8s IAM Role to Profile
      ansible.builtin.command: aws iam add-role-to-instance-profile
        --role-name "{{ iam_role }}"
        --instance-profile-name "{{ instance_profile }}"
      ignore_errors: true
    
    - name: create classic elb for services
      amazon.aws.elb_classic_lb:
        state: present
        name: "{{ my_elb }}"
        security_group_ids: "{{ ncom_sg_info['group_id'] }}"
        subnets: "{{ ncom_subnet_info['subnet']['id'] }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        stickiness:
          type: loadbalancer
          enabled: true
          expiration: 300

    - name: New EC2 Instance
      amazon.aws.ec2_instance:
        name: "{{ item }}"
        key_name: "{{ key_name }}"
        iam_instance_profile: "{{ instance_profile }}"
        vpc_subnet_id: "{{ ncom_subnet_info['subnet']['id'] }}"
        instance_type: "{{ ins_type }}"
        security_groups: 
          - "{{ ncom_net_sg }}"
        network:
          assign_public_ip: true
        image_id: "{{ ubu_22_10g }}"
        tags:
          environment: "{{ new_env }}"
      register: ec2

    - name: Register hosts to ec2group
      add_host: "hostname={{ ec2['instances'][0]['network_interfaces'][0]['association']['public_ip'] }} groups=ec2hosts"

    - name: Create DNS A record
      amazon.aws.route53:
        state: present
        overwrite: true
        zone: "{{ dns_zone }}"
        record: "{{ host_record }}"
        type: A
        ttl: 7200
        value: "{{ ec2['instances'][0]['network_interfaces'][0]['association']['public_ip'] }}"
      ignore_errors: true

- name: Import/Run basic ubuntu server setup
  ansible.builtin.import_playbook: ubuntu_server_setup.yml

- name: Import/Run K8s installation play
  ansible.builtin.import_playbook: k8s_install.yml

- name:  Import/Run AMI Creation play
  ansible.builtin.import_playbook: generate_ami.yml

- name: Initialize cluster 
  ansible.builtin.import_playbook: cluster_init.yml

- name:  Import/Run Launch Template and ASG Creation play
  ansible.builtin.import_playbook: create_launch_template_asg.yml

