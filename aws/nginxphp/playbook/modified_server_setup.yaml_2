#######################################################>
###> This Ubuntu playbook performs initial settings: 
###> Updating packages.
###> Set the prefered timzone 
###> Configure network time protocol
###> Insure root cannot direclty login over SSH
#######################################################>
- name: Initial server setup tasks
  hosts: nginx_php
  remote_user: ubuntu
  gather_facts: false
  vars_files:
    - /home/eric/wrk/dev-ops/ansible/aws/nginxphp/vars/main.yml

  tasks:
    - name: Wait for SSH
      ansible.builtin.wait_for:
        port: 22
        host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
        search_regex: OpenSSH
        delay: 10
      connection: local
 
    - debug: 
        msg: Starting task 1-1-Update cache
###> This task updates the package database, the equivalent of the
###> following command: `sudo apt update`.
    - name: Update cache
      become: true
      ansible.builtin.apt:
        update_cache: yes

    - debug: 
        msg: Starting task 1-2-Update all installed packages
###> This task upgrades all installed packages, the equivalent of the
###> following command: `sudo apt upgrade -y`.
    - name: Update all installed packages
      become: true
      ansible.builtin.apt:
        name: "*"
        state: latest
    - debug: 
        msg: Starting task 1-3
###> This task will define the prefered timezone
###> This variable is set in the vars/main.yml file.
    - name: Define prefered timezone
      become: true
      community.general.timezone:
        name: "{{ my_timezone }}"
    - debug: 
        msg: Starting task 1-4-NTP Make sure NTP service exists
###> This task ensures that the NTP daemon is running. This is especially
###> important when you want to make sure that the hosts that will power
###> your distributed application are in sync - time-wise.
    - name: Make sure NTP service exists
      become: true
      ansible.builtin.apt:
        name: systemd-timesyncd
        state: present

    - debug:
        msg: Starting task 1-4.2-NTP Make sure NTP service is running
###> This task ensures that the NTP daemon is running. This is especially
###> important when you want to make sure that the hosts that will power
###> your distributed application are in sync - time-wise.
    - name: Make sure NTP service is running
      become: true
      ansible.builtin.systemd:
        state: started
        name: systemd-timesyncd

    - debug: 
        msg: Starting task 1-5-Make sure we have a 'sudo' group
###> This task verifies that a sudo group exists on the hosts. We know this 
###> is true for Ubuntu servers, but it doesn't hurt to check.
    - name: Make sure we have a 'sudo' group
      become: true
      ansible.builtin.group:
        name: sudo
        state: present

    - debug: 
        msg: Starting task 1-6
###> This task creates the user specified in the `var/defaults.yml` file.
    - name: Create a user with sudo privileges
      become: true
      ansible.builtin.user:
        name: "{{ my_user }}"
        state: present
        groups: sudo
        append: true
        create_home: true
        shell: /bin/bash
          #        password: "{{ password | password_hash('sha512', password_salt) }}"
          #        update_password: on_create

    - debug: 
        msg: Starting task 1-7-Set authorized key for remote user
###> This task copies the public SSH key over to the user's home directory.
###> Same task as the `ssh-copy-id` command.
    - name: Set authorized key for remote user
      become: true
      ansible.posix.authorized_key:
        user: "{{ my_user }}"
        state: present
        key: "{{ copy_local_key }}"

    - debug: 
        msg: Starting task 1-8-Disable remote login for root
###> Here we look for a line that starts with the regexp in the SSH daemon's
###> configuration file and change its value to "no". We do this so that
###> any attempt to log in using the root account after running this playbook
###> will fail. 
    - name: Disable remote login for root
      become: true
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^PermitRootLogin yes'
        line: 'PermitRootLogin no'
#
    - name: UFW - Allow HTTP/HTTPS connections
      become: true
      community.general.ufw:
        rule: allow
        port: 80,443
        proto: tcp
        direction: in

    - debug: 
        msg: Skipping tasks 9,10 Starting task 1-11-Brute-force attempt protection for SSH

###> This task will then deny all other traffic access to the hosts and enable UFW.
    - name: Brute-force attempt protection for SSH
      become: true
      community.general.ufw:
        rule: limit
        port: 22
        proto: tcp

    - debug: 
        msg: Starting task 1-12-UFW - Deny other incoming traffic and enable UFW
###> This task will then deny all other traffic access to the hosts and enable UFW.
    - name: UFW - Deny other incoming traffic and enable UFW
      become: true
      community.general.ufw:
        state: enabled
        policy: deny
        direction: incoming

    - debug: 
        msg: Starting task 1-13-Remove excess packages no longer needed
###> Remove packages that are no longer required
    - name: Remove excess packages no longer needed
      become: true
      ansible.builtin.apt:
        autoremove: yes

          #    - debug: 
          #        msg: Starting task 1-14-Restart SSH
###> Since the SSH daemon's configuration file was modified, this task will apply
###> the change by reloading the daemon, ensuring that any attempt to log in using
###> the root account will fail.
#    - name: Restart SSH
#      ansible.builtin.systemd:
#        state: restarted
#        name: ssh

###> Reboot the hosts after the first tasks have completed.
- name: Reboot the hosts 
  hosts: initial
  port: "{{ ssh_port }}"
  remote_user: "{{ my_user }}"
  become: true
  vars_files:
    - vars/default.yml
    - secret
  vars:
    ansible_become_pass: "{{ password }}"

  tasks:
    - debug: 
        msg: Starting REBOOT task
###> This task will reboot all the hosts. You want to do this during an initial 
###> server setup and after running the main playbook so that any updates to the
###> kernel or a library will take effect before you start installing your application(s).
    - name: Reboot all hosts
      become: true
      ansible.builtin.reboot:
